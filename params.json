{"tagline":"A variant type for Java, with customisable automatic type conversion","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Variance","body":"# VARIANCE\r\n\r\nThe aim of *Variance* is to provide a general-purpose, custom-wirable junction box for conversion between Java types.\r\n\r\nYou put a value - any value - into a Variant, like so:\r\n\r\n```java\r\nVariant myVariant = Variant.of(myValue);\r\n```\r\n\r\nYou get it out again like so:\r\n\r\n```java\r\nMyType myInstance = myVariant.as(MyType.class);\r\n```\r\n\r\nThe value you put in doesn't have to belong to the type you pull out, but it must be *convertible* to that type.\r\n\r\nBy default, Variants can convert:\r\n\r\n  * Anything to String\r\n  * Any type of Number to any other type of Number (and implement the Number interface themselves)\r\n  * String to any kind of Number, and\r\n  * Arrays/Iterables of things it knows how to convert into arrays/Iterables of converted things\r\n\r\n```java\r\nassertThat(Variant.of(\"12\").doubleValue(), is(12.0));\r\nassertThat(Variant.of(12.0).toString(), is(\"12\"));\r\nassertThat(Variant.of(1, 2, 3, 4).asIterableOf(String.class), Contains.inOrder(\"1\", \"2\", \"3\", \"4\"));\r\nassertThat(Variant.of(\"1,2,3,4\").asIterableOf(Integer.class), Contains.inOrder(1,2,3,4));\r\n```\r\n\r\nYou can wire in other conversions by adding them to the *context* the Variant uses to resolve requests for different types. A vanilla Variant will pull its context out of a ThreadLocal, such that you can write:\r\n\r\n```java\r\n\\\\ Enter a context in which numbers are formatted to 4d.p. on conversion to string\r\nImplicitTypeConversions.enterExtended(myCustomContext);\r\n\r\nassertThat(Variant.of(12).as(String.class), is(\"12.0000\"));\r\n\r\n\\\\ Leave the custom context\r\nImplicitTypeConversions.exit()\r\n\r\nassertThat(Variant.of(12).as(String.class), is(\"12\"));\r\n```\r\n\r\nAlternatively, you can bind a Variant explicitly to a context:\r\n\r\n```java\r\nassertThat(Variant.of(12).in(myCustomContext).as(String.class), is(\"12.0000\"));\r\n```\r\n\r\nIn most cases, you will want to extend an existing context rather than create a new context from scratch:\r\n\r\n```java\r\nTypeConversionContext extended = ImplicitTypeConversions.getCurrent().extendedWith(extensions);\r\n```\r\n"}